import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Button } from 'flowbite-react';
import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';
import { Link } from 'react-router-dom';
import { HiDocumentReport } from 'react-icons/hi';
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import moment from "moment";

ChartJS.register(ArcElement, Tooltip, Legend);

axios.defaults.baseURL = 'http://localhost:8000';
axios.defaults.withCredentials = true;

export default function AdminDashHome() {
  const [totalUsers, setTotalUsers] = useState(0);
  const [adminCount, setAdminCount] = useState(0);
  const [nonAdminCount, setNonAdminCount] = useState(0);
  const [username, setUsername] = useState('Admin');
  const [greeting, setGreeting] = useState('');
  const [currentTime, setCurrentTime] = useState('');
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetchUserCounts();
    setGreetingBasedOnTime();
    fetchUsername();
    updateTime();
    const interval = setInterval(updateTime, 1000);

    return () => clearInterval(interval);
  }, []);

  const fetchUserCounts = async () => {
    try {
      const response = await axios.get('/api/user', {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
      });
      const userData = response.data;
      const admins = userData.filter((user) => user.isAdmin).length;
      const nonAdmins = userData.length - admins;

      setTotalUsers(userData.length);
      setAdminCount(admins);
      setNonAdminCount(nonAdmins);
      setUsers(userData); // Save all users for the report
    } catch (error) {
      console.error('Error fetching user counts:', error);
    }
  };

  const fetchUsername = async () => {
    try {
      const response = await axios.get('/api/user/profile', {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
      });
      setUsername(response.data.username || 'Admin');
    } catch (error) {
      console.error('Error fetching username:', error);
      setUsername('Admin');
    }
  };

  const setGreetingBasedOnTime = () => {
    const currentHour = new Date().getHours();
    if (currentHour < 12) {
      setGreeting('Good Morning');
    } else if (currentHour < 18) {
      setGreeting('Good Afternoon');
    } else {
      setGreeting('Good Evening');
    }
  };

  const updateTime = () => {
    const now = new Date();
    const formattedTime = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    setCurrentTime(formattedTime);
  };

  // Function to generate admin report
  const handleGenerateReport = () => {
    const doc = new jsPDF();

    // Set custom font
    doc.setFont('helvetica', 'normal');

    // Header Section: Title and Branding
    doc.setFillColor(41, 128, 185); // Blue background
    doc.rect(0, 0, 210, 40, 'F'); // Full-width header
    doc.setFontSize(22);
    doc.setTextColor(255, 255, 255); // White text
    doc.setFont('helvetica', 'bold');
    doc.text('HomeMate - Admin Dashboard Report', 20, 25);

    // Subheader: Generated Date
    doc.setFontSize(12);
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'normal');
    doc.text(`Generated by: ${username}`, 20, 35);
    doc.text(`Date: ${moment().format('DD/MM/YYYY HH:mm')}`, 150, 35);

    // Summary Section: Totals
    doc.setFontSize(16);
    doc.setTextColor(41, 128, 185); // Blue text
    doc.setFont('helvetica', 'bold');
    doc.text('User Statistics Summary', 20, 55);

    // Summary Cards (Boxed Layout)
    const summaryData = [
      { label: 'Total Users', value: totalUsers },
      { label: 'Admin Users', value: adminCount },
      { label: 'Regular Users', value: nonAdminCount },
    ];

    summaryData.forEach((item, index) => {
      const x = 20 + (index % 3) * 60; // Three columns
      const y = 65;
      doc.setFillColor(245, 245, 245); // Light gray background
      doc.rect(x, y, 50, 25, 'F'); // Card background
      doc.setDrawColor(200, 200, 200); // Border color
      doc.rect(x, y, 50, 25); // Card border
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0); // Black text
      doc.setFont('helvetica', 'bold');
      doc.text(item.label, x + 5, y + 10);
      doc.setFont('helvetica', 'normal');
      doc.text(`Total: ${item.value}`, x + 5, y + 20);
    });

    // Add pie chart image if available
    // This would require capturing the chart as an image and then adding it to the PDF
    doc.setFontSize(16);
    doc.setTextColor(41, 128, 185);
    doc.setFont('helvetica', 'bold');
    doc.text('User Distribution', 20, 105);
    
    // Add description of chart
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    doc.text(`The system currently has ${adminCount} administrators and ${nonAdminCount} regular users.`, 20, 115);
    doc.text(`Administrators make up ${(adminCount / totalUsers * 100).toFixed(1)}% of total users.`, 20, 125);

    // User Details Table
    doc.setFontSize(16);
    doc.setTextColor(41, 128, 185);
    doc.setFont('helvetica', 'bold');
    doc.text('User Details', 20, 145);

    // Use autoTable for a styled table
    let finalY = 155; // Default startY
    autoTable(doc, {
      startY: 155,
      head: [['Username', 'Email', 'Role', 'Created At', 'Status']],
      body: users.map((user) => [
        user.username || 'N/A',
        user.email || 'N/A',
        user.isAdmin ? 'Admin' : 'User',
        user.createdAt ? moment(user.createdAt).format('DD/MM/YYYY') : 'N/A',
        user.isActive !== undefined ? (user.isActive ? 'Active' : 'Inactive') : 'Active'
      ]),
      styles: {
        fontSize: 10,
        cellPadding: 3,
        textColor: [33, 33, 33], // Dark gray text
        font: 'helvetica',
      },
      headStyles: {
        fillColor: [41, 128, 185], // Blue header
        textColor: [255, 255, 255], // White text
        fontSize: 11,
        fontStyle: 'bold',
      },
      alternateRowStyles: {
        fillColor: [240, 240, 240], // Light gray for alternate rows
      },
      columnStyles: {
        0: { cellWidth: 35 }, // Username
        1: { cellWidth: 55 }, // Email
        2: { cellWidth: 25 }, // Role
        3: { cellWidth: 30 }, // Created At
        4: { cellWidth: 25 }, // Status
      },
      margin: { top: 155, left: 20, right: 20 },
      didDrawPage: (data) => {
        finalY = data.cursor.y; // Capture the final Y position of the table
      },
    });

    // Name and Signature Section
    const signatureY = finalY + 20; // 20mm below the table
    doc.setFontSize(12);
    doc.setTextColor(33, 33, 33); // Dark gray text
    doc.setFont('helvetica', 'bold');
    doc.text('Prepared by:', 20, signatureY);
    doc.setFont('helvetica', 'normal');
    doc.text(username, 60, signatureY);

    const signatureY2 = signatureY + 15;
    doc.setFont('helvetica', 'bold');
    doc.text('Signature:', 20, signatureY2);
    doc.setDrawColor(100, 100, 100); // Gray line
    doc.line(60, signatureY2, 120, signatureY2);

    // Authorized by section
    doc.setFont('helvetica', 'bold');
    doc.text('Authorized by:', 130, signatureY);
    doc.setDrawColor(100, 100, 100);
    doc.line(130, signatureY + 15, 190, signatureY + 15);

    // Footer: Page Number and Branding
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100); // Gray text
      doc.text(`Page ${i} of ${pageCount}`, 180, 290, { align: 'right' });
      doc.text('HomeMate Admin Dashboard Report', 20, 290);
    }

    // Save the PDF
    doc.save(`HomeMate_Admin_Report_${moment().format('YYYYMMDD_HHmm')}.pdf`);
    
    // Notify the user that report was generated
    toast.success("Admin report generated successfully!");
  };

  // Pie chart data
  const chartData = {
    labels: ['Admins', 'Non-Admins'],
    datasets: [
      {
        label: 'User Roles',
        data: [adminCount, nonAdminCount],
        backgroundColor: ['#3b82f6', '#10b981'],
        borderColor: ['#2563eb', '#059669'],
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'top',
      },
      tooltip: {
        enabled: true,
      },
    },
  };

  return (
    <div className="p-4 sm:p-6">
      <ToastContainer theme={document.documentElement.classList.contains('dark') ? 'dark' : 'light'} />

      {/* Greeting Section with Report Button */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
        <div>
          <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-gray-200">
            {greeting}, {username}!
          </h1>
          <p className="text-base sm:text-lg text-gray-600 dark:text-gray-400">
            Welcome to the Admin Dashboard.
          </p>
        </div>
        <div className="flex flex-col sm:flex-row items-center mt-4 sm:mt-0 gap-4">
          <p className="text-lg sm:text-2xl font-semibold text-gray-800 dark:text-gray-200 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-lg shadow-md">
            {currentTime}
          </p>
          <Button
            color="info"
            onClick={handleGenerateReport}
            className="sm:w-auto bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600"
          >
            <HiDocumentReport className="mr-2" />
            Generate Report
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
        <Card className="bg-blue-100 dark:bg-blue-900 shadow-md hover:shadow-lg transition-shadow duration-300">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-blue-200 dark:bg-blue-800 rounded-full">
              <span className="text-xl sm:text-2xl font-bold text-blue-600 dark:text-blue-300">U</span>
            </div>
            <div>
              <h3 className="text-sm sm:text-base font-semibold">Total Users</h3>
              <p className="text-lg sm:text-xl font-bold">{totalUsers}</p>
            </div>
          </div>
        </Card>
        <Card className="bg-green-100 dark:bg-green-900 shadow-md hover:shadow-lg transition-shadow duration-300">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-green-200 dark:bg-green-800 rounded-full">
              <span className="text-xl sm:text-2xl font-bold text-green-600 dark:text-green-300">A</span>
            </div>
            <div>
              <h3 className="text-sm sm:text-base font-semibold">Admins</h3>
              <p className="text-lg sm:text-xl font-bold">{adminCount}</p>
            </div>
          </div>
        </Card>
        <Card className="bg-yellow-100 dark:bg-yellow-900 shadow-md hover:shadow-lg transition-shadow duration-300">
          <div className="flex items-center space-x-4">
            <div className="p-3 bg-yellow-200 dark:bg-yellow-800 rounded-full">
              <span className="text-xl sm:text-2xl font-bold text-yellow-600 dark:text-yellow-300">N</span>
            </div>
            <div>
              <h3 className="text-sm sm:text-base font-semibold">Non-Admins</h3>
              <p className="text-lg sm:text-xl font-bold">{nonAdminCount}</p>
            </div>
          </div>
        </Card>
      </div>

      {/* Pie Chart */}
      <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-md">
        <h2 className="text-lg sm:text-xl font-bold mb-4 text-gray-800 dark:text-gray-200">User Roles Overview</h2>
        <div className="h-64 sm:h-96">
          <Pie data={chartData} options={chartOptions} />
        </div>
      </div>

      {/* Admin Actions */}
      <div className="mt-6">
        <h2 className="text-lg sm:text-xl font-bold mb-4 text-gray-800 dark:text-gray-200">Admin Actions</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <Link to="/admin?tab=users">
            <Card className="bg-red-100 dark:bg-red-900 shadow-md hover:shadow-lg transition-shadow duration-300">
              <h3 className="text-sm sm:text-base font-semibold">Manage Users</h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                View, edit, or delete user accounts.
              </p>
            </Card>
          </Link>
          <Card className="bg-gray-100 dark:bg-gray-900 shadow-md hover:shadow-lg transition-shadow duration-300">
            <h3 className="text-sm sm:text-base font-semibold">View Logs</h3>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Access system logs for monitoring activities.
            </p>
          </Card>
        </div>
      </div>
    </div>
  );
}